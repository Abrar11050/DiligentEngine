name: Build

on: [push, pull_request]

jobs:
  #########  Pre-checks  #########
  win-precheks:
    runs-on: windows-latest
    name: Win10 -> Pre-checks

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: true # only need direct submodules

    - name: DiligentCore format validation
      shell: cmd
      run: |
        cd "%GITHUB_WORKSPACE%\DiligentCore\BuildTools\FormatValidation"
        validate_format_win.bat

    - name: DiligentTools format validation
      shell: cmd
      run: |
        cd "%GITHUB_WORKSPACE%\DiligentTools\BuildTools\FormatValidation"
        validate_format_win.bat

    - name: DiligentFX format validation
      shell: cmd
      run: |
        cd "%GITHUB_WORKSPACE%\DiligentFX\BuildTools\FormatValidation"
        validate_format_win.bat

    - name: DiligentSamples format validation
      shell: cmd
      run: |
        cd "%GITHUB_WORKSPACE%\DiligentSamples\BuildTools\FormatValidation"
        validate_format_win.bat

  linux-precheks:
    runs-on: ubuntu-latest
    name: Linux -> Pre-checks

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: true # only need direct submodules

    - name: DiligentCore format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentCore/BuildTools/FormatValidation
        ./validate_format_linux.sh

    - name: DiligentTools format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentTools/BuildTools/FormatValidation
        ./validate_format_linux.sh

    - name: DiligentFX format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentFX/BuildTools/FormatValidation
        ./validate_format_linux.sh

    - name: DiligentSamples format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentSamples/BuildTools/FormatValidation
        ./validate_format_linux.sh

    - name: Codespell
      uses: codespell-project/actions-codespell@master
      with:
        check_filenames: true
        ignore_words_list: lod
        skip: ./.git,./DiligentCore,./DiligentTools,./DiligentFX,./DiligentSamples
        path: .

  macos-precheks:
    runs-on: macos-latest
    name: MacOS -> Pre-Checks

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: true # only need direct submodules

    - name: DiligentCore format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentCore/BuildTools/FormatValidation
        ./validate_format_mac.sh

    - name: DiligentTools format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentTools/BuildTools/FormatValidation
        ./validate_format_mac.sh

    - name: DiligentFX format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentFX/BuildTools/FormatValidation
        ./validate_format_mac.sh

    - name: DiligentSamples format validation
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/DiligentSamples/BuildTools/FormatValidation
        ./validate_format_mac.sh



  #########  Windows/UWP builds  #########
  win-build:
    needs: win-precheks
    runs-on: windows-2022

    strategy:
      fail-fast: false
      matrix:
        name: ["Win10"]
        toolset: [Win32, x64]
        build_type: [Debug, Release]
        cmake_generator: ["Visual Studio 17 2022"]
        cmake_args: ["-DDILIGENT_BUILD_TESTS=ON"]
        platform: ["Win32"]

        include:
          - name: "Win10-Dev"
            platform: "Win32"
            toolset: x64
            build_type: RelWithDebInfo
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DDILIGENT_BUILD_CORE_TESTS=ON -DDILIGENT_BUILD_TOOLS_TESTS=ON -DDILIGENT_DEVELOPMENT=ON"

          - name: "Win8.1"
            platform: "Win32"
            toolset: x64
            build_type: Release
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DDILIGENT_BUILD_CORE_TESTS=ON -DDILIGENT_BUILD_TOOLS_TESTS=ON -DCMAKE_SYSTEM_VERSION=8.1"

          - name: "Win10-Ninja"
            platform: "Win32"
            toolset: x64
            build_type: Debug
            cmake_generator: "Ninja"
            cmake_args: "-DDILIGENT_BUILD_CORE_TESTS=ON -DDILIGENT_BUILD_TOOLS_TESTS=ON "

          - name: "UWP"
            platform: "UWP"
            toolset: x64
            build_type: Debug
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0"

          - name: "UWP"
            platform: "UWP"
            toolset: x64
            build_type: Release
            cmake_generator: "Visual Studio 17 2022"
            cmake_args: "-DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION=10.0"

    name: Win10 -> ${{ matrix.name }}-${{ matrix.toolset }}, ${{ matrix.build_type }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform:      ${{ matrix.platform }}
        setup-ninja:   ${{ matrix.cmake_generator == 'Ninja' }}
        ninja-vs-arch: ${{ matrix.toolset }}

    - name: Configure CMake
      if: success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        generator:  ${{ matrix.cmake_generator }}
        vs-arch:    ${{ matrix.toolset }}
        build-type: ${{ matrix.build_type }}
        cmake-args: ${{ matrix.cmake_args }}

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@master


    - name: DiligentCoreTest
      if:   ${{ success() && matrix.name != 'UWP'}}
      uses: DiligentGraphics/github-action/run-core-tests@master

    - name: DiligentCoreAPITest D3D11
      if: ${{ success() && (matrix.name == 'Win10' || matrix.name == 'Win8.1') }}
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE\DiligentCore\Tests\DiligentCoreAPITest\assets"
        "${{runner.workspace}}\build\DiligentCore\Tests\DiligentCoreAPITest\${{ matrix.build_type }}\DiligentCoreAPITest.exe" --mode=d3d11_sw

    - name: DiligentCoreAPITest D3D12
      if: ${{ success() && matrix.name == 'Win10' }}
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE\DiligentCore\Tests\DiligentCoreAPITest\assets"
        "${{runner.workspace}}\build\DiligentCore\Tests\DiligentCoreAPITest\${{ matrix.build_type }}\DiligentCoreAPITest.exe" --mode=d3d12_sw

    - name: DiligentCoreAPITest D3D12 DXC
      if: ${{ success() && matrix.name == 'Win10' }}
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE\DiligentCore\Tests\DiligentCoreAPITest\assets"
        "${{runner.workspace}}\build\DiligentCore\Tests\DiligentCoreAPITest\${{ matrix.build_type }}\DiligentCoreAPITest.exe" --mode=d3d12_sw --shader_compiler=dxc


    - name: DiligentToolsTest
      if: ${{ success() && matrix.name != 'UWP'}}
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE\DiligentTools\Tests\DiligentToolsTest\assets"
        export BIN_DIR="${{runner.workspace}}\build\DiligentTools\Tests\DiligentToolsTest"
        if [ "${{ matrix.cmake_generator }}" != "Ninja" ]; then BIN_DIR="$BIN_DIR\${{ matrix.build_type }}"; fi
        "$BIN_DIR\DiligentToolsTest.exe"

    - name: DiligentToolsGPUTest D3D11
      if: ${{ success() && (matrix.name == 'Win10' || matrix.name == 'Win8.1') }}
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE\DiligentTools\Tests\DiligentToolsGPUTest\assets"
        "${{runner.workspace}}\build\DiligentTools\Tests\DiligentToolsGPUTest\${{ matrix.build_type }}\DiligentToolsGPUTest.exe" --mode=d3d11_sw

    - name: DiligentToolsGPUTest D3D12
      if: ${{ success() && matrix.name == 'Win10' }}
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE\DiligentTools\Tests\DiligentToolsGPUTest\assets"
        "${{runner.workspace}}\build\DiligentTools\Tests\DiligentToolsGPUTest\${{ matrix.build_type }}\DiligentToolsGPUTest.exe" --mode=d3d12_sw



  #########  Linux builds  #########
  linux-build:
    needs: linux-precheks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        name: ["GCC", "Clang"]
        build_type: ["Debug", "Release"]
        cmake_args: ["-DDILIGENT_BUILD_TESTS=ON"]
        include:
          - name: "GCC"
            cmake_generator: "Unix Makefiles"
            cc: gcc-9
            cxx: g++-9

          - name: "Clang"
            cmake_generator: "Ninja"
            cc: clang-12
            cxx: clang++-12

    name: Linux -> ${{ matrix.name }}-x64, ${{ matrix.build_type }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform:    Linux
        setup-ninja: ${{ matrix.cmake_generator == 'Ninja' }}

    - name: Configure CMake
      if: success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        cc:         ${{ matrix.cc }}
        cxx:        ${{ matrix.cxx }}
        generator:  ${{ matrix.cmake_generator }}
        build-type: ${{ matrix.build_type }}
        cmake-args: ${{ matrix.cmake_args }}

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@master

    - name: DiligentCoreTest
      if: success()
      uses: DiligentGraphics/github-action/run-core-tests@master

    - name: DiligentToolsTest
      if: success()
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE/DiligentTools/Tests/DiligentToolsTest/assets"
        ${{runner.workspace}}/build/DiligentTools/Tests/DiligentToolsTest/DiligentToolsTest



  #########  MacOS/iOS/tvOS builds  #########
  macos-build:
    needs: macos-precheks
    runs-on: macos-latest

    strategy:
      matrix:
        platform: [MacOS, iOS, tvOS]
        build_type: [Debug, Release]
        exclude:
          # Exclude tvOS-Release
          - platform: tvOS
            build_type: Release
        include:
          - platform: "MacOS"
            build_type: "Debug"
            cmake_args: "-DDILIGENT_BUILD_TESTS=ON"
          - platform: "MacOS"
            build_type: "Release"
            cmake_args: "-DDILIGENT_BUILD_CORE_TESTS=ON -DDILIGENT_BUILD_TOOLS_TESTS=ON"
          - platform: "iOS"
            cmake_args: ""
          - platform: "tvOS"
            cmake_args: ""

    name: MacOS -> ${{ matrix.platform }}-${{ matrix.build_type }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform: ${{ matrix.platform }}

    - name: Configure CMake
      if: success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        build-type: ${{ matrix.build_type }}
        cmake-args: ${{ matrix.cmake_args }}

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@master

    - name: DiligentCoreTest
      if:   ${{ success() && matrix.platform == 'MacOS' }}
      uses: DiligentGraphics/github-action/run-core-tests@master

    - name: DiligentToolsTest
      if: ${{ success() && matrix.platform == 'MacOS' }}
      shell: bash
      run: |
        cd "$GITHUB_WORKSPACE/DiligentTools/Tests/DiligentToolsTest/assets"
        ${{runner.workspace}}/build/DiligentTools/Tests/DiligentToolsTest/DiligentToolsTest



  #########  Android  #########
  android-build:
    needs: linux-precheks
    runs-on: ubuntu-latest
    name: Linux -> Android-ARM32-ARM64

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform:     Android
        java-version: 8 # Override Java version

    - name: Build with Gradle
      if: success()
      run: |
        cd $GITHUB_WORKSPACE/DiligentSamples/Android
        chmod +x gradlew
        ./gradlew buildDebug



  #########  Emscripten  #########
  emscripten-build:
    needs: linux-precheks

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        build_type: [Debug, Release]
        exclude:
          # Exclude MacOS-Release
          - os: macos-latest
            build_type: Release
        include:
          - os: windows-latest
            host_name: Win10
          - os: ubuntu-latest
            host_name: Linux
          - os: macos-latest
            host_name: MacOS

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.host_name }} -> Emscripten, ${{ matrix.build_type }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set up build environment
      if: success()
      uses: DiligentGraphics/github-action/setup-build-env@v1
      with:
        platform: Emscripten

    - name: Configure CMake
      if: success()
      uses: DiligentGraphics/github-action/configure-cmake@v1
      with:
        build-type: ${{ matrix.build_type }}

    - name: Build
      if: success()
      uses: DiligentGraphics/github-action/build@master
